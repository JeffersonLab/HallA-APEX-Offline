// Description of APEX optics


#include "TROOT.h"
#include "TMath.h"

using namespace std;

/////////////////////////////////////////////////////////////////////////
// Input Sections
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////

// HRS Position Inputs
const Double_t D2R = TMath::Pi() / 180.;

//set as central sieve hole angle
const Double_t HRSAngle = -5 * D2R;


// MissPoint* are in HCS
const Double_t MissPointZ = 0;//1.69*1e-3 //RHRS offsets 
const Double_t MissPointY = 0;//-1.79*1e-3 



const Double_t BeamShiftX = 0;

const Double_t SieveRadius = 0.055*25.4/2.0*1e-3;
const Double_t SieveRadius_c = 0.106*25.4/2.0*1e-3;

//const Double_t SieveRadius = 0;       
//const Double_t SieveRadius_c = 0;   

// average beam positions
const Double_t BeamX_average[] = {1.76e-3, -0.9646e-3, -2.137e-3, -2.211e-3, -2.211e-3, -2.211e-3, -2.211e-3, -2.2e-3, -2.2e-3, -2.2e-3, -2.2e-3};
const Double_t BeamY_average[] = {2.726e-3, 2.845*1e-3, 2.879e-3, 2.9e-3, 2.9e-3, 2.9e-3, 2.9e-3, 2.912e-3, 2.912e-3, 2.912e-3, 2.912e-3};


/////////////////////////////////////////////////////////////////////////
// Sieve Position Inputs
const Double_t YbyCol = .19 * 25.4e-3;
const Double_t y_off = -31.23 * tan(0.8 *D2R) * 25.4e-3; 
const Double_t SieveYbyCol[]= {7*YbyCol + y_off, 6.5*YbyCol + y_off, 6*YbyCol + y_off, 5.5*YbyCol + y_off, 5*YbyCol + y_off, 4.5*YbyCol + y_off, 4*YbyCol + y_off, 3.5*YbyCol + y_off, 3*YbyCol + y_off, 2.5*YbyCol + y_off, 2*YbyCol + y_off, 1.5*YbyCol + y_off, 1.0*YbyCol + y_off, 0.5*YbyCol + y_off, 0.0*YbyCol + y_off, -0.5*YbyCol + y_off, -1*YbyCol + y_off, -1.5*YbyCol + y_off, -2*YbyCol + y_off, -2.5*YbyCol + y_off, -3*YbyCol + y_off, -3.5*YbyCol + y_off, -4*YbyCol + y_off, -4.5*YbyCol + y_off, -5*YbyCol + y_off, -6*YbyCol + y_off, -7*YbyCol + y_off, 1e36};
const UInt_t NSieveCol = 27; 

const Double_t XbyRow = .46 * 25.4e-3;


const Double_t SieveXbyRow[] = {-4 * XbyRow, -3.5 * XbyRow, -3 * XbyRow, -2.5 * XbyRow, -2 * XbyRow, -1.5 * XbyRow, -1 * XbyRow, -0.5 * XbyRow, 0*XbyRow, 0.5 * XbyRow, 1*XbyRow, 1.5 * XbyRow, 2 * XbyRow, 2.5 * XbyRow, 3 * XbyRow, 3.5 * XbyRow, 4 * XbyRow, 1e36}; // vertical positions of the sieve holes when the column number is odd, column number starts with 0
const UInt_t NSieveRow = 17; 

//////Sieve Survey Inputs////
double yaw = -5.372 * D2R;     //Degree of yaw
double pitch = 90.019 * D2R;  //Degree of pitch 

// SieveOff* are in TCS
const Double_t SieveOffY = 2.07*1.e-3;// -(3.314-0.8)*1.e-3;
const Double_t SieveOffX = -1.65*1.e-3;//-(1.07+1.42)*1.e-3;
const Double_t SieveOffZ = 1.49*1.e-3;//-(1.07+1.42)*1.e-3;

const Double_t ZPos = 31.23 * 25.4e-3;



/////////////////////////////////////////////////////////////////////////
// Vertex Position Inputs

static const UInt_t NFoils = 11;   //4 foils in each optics run
const Double_t targetoffset = -5*1e-3;
//const Double_t targetfoils[] = {-0.2 + targetoffset, 0.0 + targetoffset, 0.2 + targetoffset, -0.3 + targetoffset, -0.15 + targetoffset, 0.075 + targetoffset, 0.219 + targetoffset, -0.219 + targetoffset, -0.075 + targetoffset, 0.150 + targetoffset, 0.3 + targetoffset, 1e36};
//Vertical Wires ID 0-2, Optics 1 ID 3-6, Optics 3 ID 7-10
//Matching John's system, Vertical Wires ID 8-10, Optics 1 ID 0,2,4,6, Optics 3 ID 1,3,5,7
const Double_t targetfoils[] = {-0.3 + targetoffset, -0.219 + targetoffset, -0.15 + targetoffset, -0.075 + targetoffset, 0.075 + targetoffset, 0.150 + targetoffset, 0.219 + targetoffset, 0.3 + targetoffset, -0.2 + targetoffset, 0.0 + targetoffset, 0.2 + targetoffset, 1e36};

double target_yaw =  0.1022 * D2R;
double target_pitch = -0.0219 * D2R;

const Double_t targetfoilsX[] = {2.5e-3, 0, -2.5e-3};



std::vector<TString> Foil_names;





