#!/usr/bin/python


#######################################################
# Python Script to print optics DB 
# with chosen order
#  John Williamson
#  26/2/2020
#######################################################

from itertools import product


def print_DB(order):
    

    # parameter is arbitary amount of entries DB expects after T 0 0 0 (or other ME) = kPORDER in LOpticsOpt.h
    no_entries = 7

    order_name = ""
    
    order = int(order)

    print("order = ", order)

    if order == 3:
        order_name = "3rd"
    if order == 4:
        order_name = "4th"
    if order == 5:
        order_name = "5th"
        
    file = open(f"DB/example_{order_name}_order","w")

    

    # writing in unchanged momentum Matrix Elements
    file.write(''' [ L.global ]
0.3327 1 0.0 270.2 0.0 -1.6e-03        VDC Angle, Plane Spacing, Gamma Coefficents
L.vdc.matrixelem = 
t 0 0 0  -1.001135e+00 -3.313373e-01 -4.290819e-02  4.470852e-03  0.000000e+00  0.000000e+00  0.000000e+00  0
y 0 0 0  -8.060915e-03  1.071977e-03  9.019102e-04 -3.239615e-04  0.000000e+00  0.000000e+00  0.000000e+00  0
p 0 0 0  -2.861912e-03 -2.469069e-03  8.427172e-03  2.274635e-03  0.000000e+00  0.000000e+00  0.000000e+00  0
D 0 0 0   1.277202e-03  7.643348e-02  9.113928e-03  6.217384e-04 -4.231451e-04  0.000000e+00  0.000000e+00  5
D 0 0 1   4.444100e-04 -1.884416e-02  7.634256e-02 -1.626888e-02  0.000000e+00  0.000000e+00  0.000000e+00  4
D 0 0 2   5.848935e-01  2.142833e+00  4.466630e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  3
D 0 0 3   3.939065e-01 -2.002097e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 0 1 1  -1.520792e-01  4.645832e-02  6.352842e-01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  3
D 0 1 2  -6.236001e+00  1.915826e+01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 0 2 1  -1.702337e+01 -5.207902e+01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 1 0 1  -5.729707e-01 -8.784721e+00 -3.799885e+00  8.338415e+00  0.000000e+00  0.000000e+00  0.000000e+00  3
D 1 0 2   3.385883e+01 -2.168959e+02 -2.651049e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 1 1 1   2.222168e+01  6.571493e+01  4.097737e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 2 0 1  -2.666794e+01  4.346068e+01 -3.081418e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 3 0 1   3.543513e+03  7.845790e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 0 1 0   1.734678e-03 -4.479246e-03  5.104177e-02 -2.219888e-02 -3.879097e-03  0.000000e+00  0.000000e+00  4
D 0 2 0   5.142109e-01 -1.153821e+00  2.996043e-01  2.253249e-02  0.000000e+00  0.000000e+00  0.000000e+00  3
D 0 3 0   1.414610e+01  5.092820e+00  2.781767e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 0 4 0   4.002699e+02 -1.080114e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 0 5 0   1.842291e+01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0
D 1 0 0  -3.313879e-02  3.020244e-01 -5.351822e-02  2.070861e-01 -6.171809e-02  0.000000e+00  0.000000e+00  4
D 1 1 0  -2.189066e+00  5.194822e+00 -3.291014e+00  8.933980e+00  0.000000e+00  0.000000e+00  0.000000e+00  3
D 1 2 0  -4.095317e+01  7.855717e+01 -2.611485e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 1 3 0   2.081494e+01  3.827264e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 1 4 0  -2.854487e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0
D 2 0 0  -3.253789e+00  5.729799e-01 -4.722074e+00 -2.501825e-01  0.000000e+00  0.000000e+00  0.000000e+00  3
D 2 1 0  -1.505654e+01  2.425558e+01 -2.200582e+01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 2 2 0  -1.931503e+02 -1.541879e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 2 3 0  -2.880290e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0
D 3 0 0   1.185237e+02 -1.920899e+02  5.358677e+01  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  2
D 3 1 0   4.605617e+03 -1.041034e+04  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 3 2 0  -9.864738e+02  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0
D 4 0 0   6.310007e+03  3.536085e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  1
D 4 1 0   1.791899e+03  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0
D 5 0 0  -1.474569e+05  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0.000000e+00  0''')



    # now write in Xth order elements for T,P and Y

    letters = ["T","P","Y"]

    EL_orders = [order,order,order]


    file.write("\n")
    for El, ord in zip(letters,EL_orders):
        for i,j,k in product(range(ord+1), repeat=3):
            #print(f"i = {i}, j = {j}, k = {k}")
            if (i + j + k) < order + 1:
                file.write(f"{El} {i} {j} {k}")
                for var in range(order - (i + j + k) + 1):
                    file.write(" 0.01")
                for entries in range(no_entries - (order - (i + j + k) + 1)):
                    file.write(" 0")

                file.write(f" {order - (i + j + k) + 1}")
                file.write("\n")
    
    
    file.write('''L 0 0 0 0  24.216
L 0 1 0 0 -13.1041
L 0 2 0 0  20.8672
L 0 1 1 0  -1.8728
L 1 0 0 0   0.0482
L 2 0 0 0   0.0675
L 1 0 0 1   0.0281
L 1 1 0 0   2.4314
L 0 0 0 1   0.1408
L 1 0 1 0  -0.0845
L 0 0 0 2   9.3063
L 0 0 2 0   6.3451
L 0 0 1 1  -7.7394
L 0 0 1 0  -0.1443
L 0 1 0 1   1.7292
''')
            
    


order = input("Enter order of matrix to be printed? (3rd, 4th, 5th) ..  ")


print_DB(order)
